# This workflow is a test. It creates a Github issue each time an issue is closed.
# It uses the `gh` client with a dedicated Access Token with read/write issues permissions.

name: Assign Project & column to new issue
on:
  # Ref: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issues
  issues:
    # opened = created, edited = title or body were edited
    types: [opened,edited]
  # We also want to be able to run this workflow manually from Github. so all issues without project get one
  workflow_dispatch:

env:
  # Manually create a Personal Access Token (classic) with scopes: gist, project, read:org, repo, workflow
  # Store it in the Actions secrets as GH_MY_TOKEN
  GH_MY_TOKEN: ${{ secrets.GH_MY_TOKEN }}
  # GH_PROJECT_ID: embergershared/2
  GH_PROJECT_NAME: 'Contoso University App'

jobs:
  move-assigned-card:
    name: Process the issue
    runs-on: ubuntu-latest
    # runs-on:
    #   # We use a GH organization Self-hosted runner wired in the Private VNET
    #   group: embergershared
    #   labels: 912772
    steps:
      # For 'gh' to work, we need to operate in a git repo
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate with PAT (classic)
        run: |
          echo ${{ secrets.GH_MY_TOKEN }} | gh auth login --with-token

      - name: List repo issues
        run: |
          echo "List issues:"
          gh issue list
  
      - name: Show edited issue
        run: |
          echo "Getting the triggered issue details"
          gh issue view ${{ github.event.issue.number }}

      - name: Gathering project details
        run: |
          echo "Getting the project details"
          ORG=$(gh repo view --json owner --jq .owner.login)
          echo "Organization: $ORG"
          PROJECTS_JSON=$(gh project list --owner $ORG --format 'json')
          echo "Found projects:"
          echo $PROJECTS_JSON | jq -C
          # PROJECT_JSON=$(echo $PROJECTS_JSON | jq '.projects[] | select(.title == "Contoso University App")')
          PROJECT_JSON=$(echo $PROJECTS_JSON | jq '.projects[] | select(.title == "${{ env.GH_PROJECT_NAME }}")')
          echo "Found our project:"
          echo $PROJECT_JSON | jq -C
          PROJECT_NUMBER=$(echo $PROJECT_JSON | jq '.number')
          echo "Our project number is: $PROJECT_NUMBER"
          GH_PROJECT_ID=$ORG/$PROJECT_NUMBER
          echo "Our project ID is: $GH_PROJECT_ID"
          gh project view $PROJECT_ID

      - name: Add edited issue to project
        run: |
          echo "Getting the issues already in our project"
          IN_PROJ_ISSUES=$(gh issue list -S "project:$GH_PROJECT_ID" --json number --jq .[].number)
          echo "Testing if the trigering issue is already in our project"
          if [[ $IN_PROJ_ISSUES =~ ${{ github.event.issue.number }} ]]; then
            echo "Issue is already in our project: we stop here"
          else
            echo "Issue is not in our project: Adding it!"
            # Ref: https://cli.github.com/manual/gh_project
            gh issue edit ${{ github.event.issue.number }} --add-project '${{ env.GH_PROJECT_NAME }}'
          fi
